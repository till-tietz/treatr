library(dplyr)
# treated zips
data_treat <- read_dta("data.dta")%>%
dplyr::select(zip,treatment_entire)%>%
group_by(zip)%>%
summarize_all(mean)%>%
ungroup()
library(haven)
# treated zips
data_treat <- read_dta("data.dta")%>%
dplyr::select(zip,treatment_entire)%>%
group_by(zip)%>%
summarize_all(mean)%>%
ungroup()
# reading geometries of postcodes, projecting to german coordinates and buffering to remove
# self intersection errors
plz <- st_read("plz-gebiete.shp")%>%
mutate(plz = as.numeric(plz),
note = as.character(note))%>%
mutate(zip = substr(note,1,5))%>%
mutate(zip = str_remove(zip, "^0+"))%>%
dplyr::select(zip)
library(treatr)
library(sf)
# 4839
# treated zips
data_treat <- read_dta("data.dta")%>%
dplyr::select(zip,treatment_entire)%>%
group_by(zip)%>%
summarize_all(mean)%>%
ungroup()
# reading geometries of postcodes, projecting to german coordinates and buffering to remove
# self intersection errors
plz <- st_read("plz-gebiete.shp")%>%
mutate(plz = as.numeric(plz),
note = as.character(note))%>%
mutate(zip = substr(note,1,5))%>%
mutate(zip = str_remove(zip, "^0+"))%>%
dplyr::select(zip)
library(stringr)
# reading geometries of postcodes, projecting to german coordinates and buffering to remove
# self intersection errors
plz <- st_read("plz-gebiete.shp")%>%
mutate(plz = as.numeric(plz),
note = as.character(note))%>%
mutate(zip = substr(note,1,5))%>%
mutate(zip = str_remove(zip, "^0+"))%>%
dplyr::select(zip)
# combine geometries and treatment data
plz <- st_as_sf(merge(data_treat, plz, by.x = "zip", by.y = "zip"))
# reading projecting and buffering geometries of german municipalities
municipalities <- st_read("deutschland-stadte-und-gemeinden.shp")%>%
dplyr::filter(engtype_4 == "Town")%>%
dplyr::select(c(name_1,name_2,name_3,name_4,id_4))%>%
slice(.,c(1:20))
a <- treatr::continuous.treatment(plz,municipalities,4839)
library(future)
library(furrr)
a <- treatr::continuous.treatment(plz,municipalities,4839)
plz <- plz %>% rename(treatment = treatment_entire)
a <- treatr::continuous.treatment(plz,municipalities,4839)
a <- treatr::continuous.treatment(plz,municipalities,4839)
View(municipalities)
a <- treatr::continuous.treatment(input.level = plz,output.level = municipalities,coordinate.system = 4839, filter.automatic = FALSE)
class(plz)
library(tidyverse)
a <- treatr::continuous.treatment(input.level = plz,output.level = municipalities,coordinate.system = 4839, filter.automatic = FALSE)
fun_1 <- function(input.level, output.level, coordinate.system = 4326, filter = NULL, filter.automatic = FALSE){
if(!is.null(filter) & filter.automatic == TRUE){
stop("both user set and automatic filters are specified. please choose one filtering method.")
}
if(missing(input.level)){ stop("missing input.level")
} else {
if(class(input.level)[[1]] != "sf"){ stop("input.level not of class sf. please input sf object with st_read function")
} else {
input_level <- input.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
}
}
if(missing(output.level)){ stop("missing output.level")
} else {
if(class(output.level)[[1]] != "sf"){ stop("output.level not of class sf. please input sf object with st_read function")
} else {
output_level <- output.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
output_level <- output_level %>%
dplyr::mutate(area = sf::st_area(output_level))%>%
dplyr::mutate(area = as.character(area))%>%
dplyr::mutate(area = as.numeric(substr(area,1,nchar(area)-5)))
}
}
intersects <- sf::st_intersects(output_level, input_level)
cont_treat <- function(x){
area_output <- output_level %>% dplyr::slice(.,x)
area_input <- input_level %>% dplyr::slice(., intersects[[x]])
intersection <- sf::st_intersection(area_output, area_input)
intersection <- intersection%>%
dplyr::mutate(area_intersect = sf::st_area(intersection))%>%
dplyr::mutate(area_intersect = as.character(area_intersect))%>%
dplyr::mutate(area_intersect = as.numeric(substr(area_intersect,1,nchar(area_intersect)-5)))%>%
dplyr::mutate(area_fraction = (area_intersect / area))%>%
dplyr::select(-c(area))%>%
sf::st_set_geometry(.,NULL)
if(is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::mutate(area_fraction = area_fraction * 100)%>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction))%>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
##########
} else {
if(!is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::filter(area_intersect > filter) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
##########
} else {
if(is.null(filter) & filter.automatic == TRUE){
filter_value <- sf::st_area(input_level) %>% as.character() %>% as.numeric(substr(.,1,nchar(.)-5))
intersection <- intersection %>%
dplyr::filter(area_intersect > min(filter_value)) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
}
}
}
}
future::plan(multiprocess)
cont_treat_out <- furrr::future_map((1:nrow(output_level)), ~cont_treat(.x), .progress = TRUE)
treatment_continuous <- dplyr::bind_rows(cont_treat_out, .id = "column_label")%>%
dplyr::select(-c(column_label))
return(treatment_continuous)
}
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839, filter.automatic = FALSE)
library(sf)
View(plz)
fun_1 <- function(input.level, output.level, coordinate.system = 4326, filter = NULL, filter.automatic = FALSE){
if(!is.null(filter) & filter.automatic == TRUE){
stop("both user set and automatic filters are specified. please choose one filtering method.")
}
if(missing(input.level)){ stop("missing input.level")
} else {
if(class(input.level)[[1]] != "sf"){ stop("input.level not of class sf. please input sf object with st_read function")
} else {
input_level <- input.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
}
}
if(missing(output.level)){ stop("missing output.level")
} else {
if(class(output.level)[[1]] != "sf"){ stop("output.level not of class sf. please input sf object with st_read function")
} else {
output_level <- output.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
output_level <- output_level %>%
dplyr::mutate(area = sf::st_area(output_level))%>%
dplyr::mutate(area = as.character(area))%>%
dplyr::mutate(area = as.numeric(substr(area,1,nchar(area)-5)))
}
}
intersects <- sf::st_intersects(output_level, input_level)
cont_treat <- function(x){
area_output <- output_level %>% dplyr::slice(.,x)
area_input <- input_level %>% dplyr::slice(., intersects[[x]])
intersection <- sf::st_intersection(area_output, area_input)
intersection <- intersection%>%
dplyr::mutate(area_intersect = sf::st_area(intersection))%>%
dplyr::mutate(area_intersect = as.character(area_intersect))%>%
dplyr::mutate(area_intersect = as.numeric(substr(area_intersect,1,nchar(area_intersect)-5)))%>%
dplyr::mutate(area_fraction = (area_intersect / area))%>%
dplyr::select(-c(area))%>%
sf::st_set_geometry(.,NULL)
if(is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::mutate(area_fraction = area_fraction * 100)%>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction))%>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
##########
} else {
if(!is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::filter(area_intersect > filter) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
##########
} else {
if(is.null(filter) & filter.automatic == TRUE){
filter_value <- sf::st_area(input_level) %>% as.character() %>% as.numeric(substr(.,1,nchar(.)-5))
intersection <- intersection %>%
dplyr::filter(area_intersect > min(filter_value)) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
}
}
}
}
future::plan(multiprocess)
cont_treat_out <- furrr::future_map((1:nrow(output_level)), ~cont_treat(.x), .progress = TRUE)
treatment_continuous <- dplyr::bind_rows(cont_treat_out, .id = "column_label")%>%
dplyr::select(-c(column_label))
return(treatment_continuous)
}
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
1
1
fun_1 <- function(input.level, output.level, coordinate.system = 4326, filter = NULL, filter.automatic = FALSE){
if(!is.null(filter) & filter.automatic == TRUE){
stop("both user set and automatic filters are specified. please choose one filtering method.")
}
if(missing(input.level)){ stop("missing input.level")
} else {
if(class(input.level)[[1]] != "sf"){ stop("input.level not of class sf. please input sf object with st_read function")
} else {
input_level <- input.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
}
}
if(missing(output.level)){ stop("missing output.level")
} else {
if(class(output.level)[[1]] != "sf"){ stop("output.level not of class sf. please input sf object with st_read function")
} else {
output_level <- output.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
output_level <- output_level %>%
dplyr::mutate(area = sf::st_area(output_level))%>%
dplyr::mutate(area = as.character(area))%>%
dplyr::mutate(area = as.numeric(substr(area,1,nchar(area)-5)))
}
}
intersects <- sf::st_intersects(output_level, input_level)
cont_treat <- function(x){
area_output <- output_level %>% dplyr::slice(.,x)
area_input <- input_level %>% dplyr::slice(., intersects[[x]])
intersection <- sf::st_intersection(area_output, area_input)
intersection <- intersection%>%
dplyr::mutate(area_intersect = sf::st_area(intersection))%>%
dplyr::mutate(area_intersect = as.character(area_intersect))%>%
dplyr::mutate(area_intersect = as.numeric(substr(area_intersect,1,nchar(area_intersect)-5)))%>%
dplyr::mutate(area_fraction = (area_intersect / area))%>%
dplyr::select(-c(area))%>%
sf::st_set_geometry(.,NULL)
if(is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::mutate(area_fraction = area_fraction * 100)%>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction))%>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
return(intersection)
##########
} else {
if(!is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::filter(area_intersect > filter) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
return(intersection)
##########
} else {
if(is.null(filter) & filter.automatic == TRUE){
filter_value <- sf::st_area(input_level) %>% as.character() %>% as.numeric(substr(.,1,nchar(.)-5))
intersection <- intersection %>%
dplyr::filter(area_intersect > min(filter_value)) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
return(intersection)
}
}
}
}
future::plan(multiprocess)
cont_treat_out <- furrr::future_map((1:nrow(output_level)), ~cont_treat(.x), .progress = TRUE)
treatment_continuous <- dplyr::bind_rows(cont_treat_out, .id = "column_label")%>%
dplyr::select(-c(column_label))
return(treatment_continuous)
}
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
detach("package:tibble", unload = TRUE)
library(tibble)
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
View(intersection)
a <- plz %>% st_set_geometry(.,NULL)
View(a)
fun_1 <- function(input.level, output.level, coordinate.system = 4326, filter = NULL, filter.automatic = FALSE){
if(!is.null(filter) & filter.automatic == TRUE){
stop("both user set and automatic filters are specified. please choose one filtering method.")
}
if(missing(input.level)){ stop("missing input.level")
} else {
if(class(input.level)[[1]] != "sf"){ stop("input.level not of class sf. please input sf object with st_read function")
} else {
input_level <- input.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
}
}
if(missing(output.level)){ stop("missing output.level")
} else {
if(class(output.level)[[1]] != "sf"){ stop("output.level not of class sf. please input sf object with st_read function")
} else {
output_level <- output.level %>% sf::st_transform(coordinate.system) %>% sf::st_buffer(.,0)
output_level <- output_level %>%
dplyr::mutate(area = sf::st_area(output_level))%>%
dplyr::mutate(area = as.character(area))%>%
dplyr::mutate(area = as.numeric(substr(area,1,nchar(area)-5)))
}
}
intersects <- sf::st_intersects(output_level, input_level)
cont_treat <- function(x){
area_output <- output_level %>% dplyr::slice(.,x)
area_input <- input_level %>% dplyr::slice(., intersects[[x]])
intersection <- sf::st_intersection(area_output, area_input)
intersection <- intersection%>%
dplyr::mutate(area_intersect = sf::st_area(intersection))%>%
dplyr::mutate(area_intersect = as.character(area_intersect))%>%
dplyr::mutate(area_intersect = as.numeric(substr(area_intersect,1,nchar(area_intersect)-5)))%>%
dplyr::mutate(area_fraction = (area_intersect / area))%>%
dplyr::select(-c(area))%>%
sf::st_set_geometry(.,NULL)
if(is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::mutate(area_fraction = area_fraction * 100)%>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction))%>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
return(intersection)
##########
} else {
if(!is.null(filter) & filter.automatic == FALSE){
intersection <- intersection %>%
dplyr::filter(area_intersect > filter) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
return(intersection)
##########
} else {
if(is.null(filter) & filter.automatic == TRUE){
filter_value <- sf::st_area(input_level) %>% as.character() %>% as.numeric(substr(.,1,nchar(.)-5))
intersection <- intersection %>%
dplyr::filter(area_intersect > min(filter_value)) %>%
dplyr::mutate(area_fraction = (area_fraction + ((1-(sum(area_fraction)))/nrow(.)))*100) %>%
dplyr::group_by(treatment)%>%
dplyr::mutate(percent_treated = sum(area_fraction)) %>%
dplyr::ungroup()
intersection <- if(1 %in% intersection$treatment){
intersection %>%
dplyr::filter(treatment == 1) %>%
dplyr::slice(.,1)
} else {
intersection %>%
dplyr::filter(treatment == 0) %>%
dplyr::slice(.,1) %>%
dplyr::mutate(percent_treated = replace(percent_treated, 1, 0))
}
intersection <- intersection %>%
dplyr::select(-c(area_intersect,area_fraction,treatment))
return(intersection)
}
}
}
}
cont_treat_out <- purrr::map((1:nrow(output_level)), ~cont_treat(.x), .progress = TRUE)
treatment_continuous <- dplyr::bind_rows(cont_treat_out, .id = "column_label")%>%
dplyr::select(-c(column_label))
return(treatment_continuous)
}
a <- fun_1(input.level = plz,output.level = municipalities,coordinate.system = 4839)
View(a)
install_github("till-tietz/treatr")
library(treatr)
